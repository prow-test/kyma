// Code generated by mockery v1.0.0
package servicecatalog

import mock "github.com/stretchr/testify/mock"
import pager "github.com/kyma-project/kyma/components/ui-api-layer/internal/pager"
import resource "github.com/kyma-project/kyma/components/ui-api-layer/pkg/resource"
import status "github.com/kyma-project/kyma/components/ui-api-layer/internal/domain/servicecatalog/status"
import v1beta1 "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1beta1"

// mockInstanceSvc is an autogenerated mock type for the instanceSvc type
type mockInstanceSvc struct {
	mock.Mock
}

// Create provides a mock function with given fields: params
func (_m *mockInstanceSvc) Create(params instanceCreateParameters) (*v1beta1.ServiceInstance, error) {
	ret := _m.Called(params)

	var r0 *v1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(instanceCreateParameters) *v1beta1.ServiceInstance); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(instanceCreateParameters) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, namespace
func (_m *mockInstanceSvc) Delete(name string, namespace string) error {
	ret := _m.Called(name, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: name, environment
func (_m *mockInstanceSvc) Find(name string, environment string) (*v1beta1.ServiceInstance, error) {
	ret := _m.Called(name, environment)

	var r0 *v1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(string, string) *v1beta1.ServiceInstance); ok {
		r0 = rf(name, environment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, environment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBindable provides a mock function with given fields: relatedClass, relatedPlan
func (_m *mockInstanceSvc) IsBindable(relatedClass *v1beta1.ClusterServiceClass, relatedPlan *v1beta1.ClusterServicePlan) bool {
	ret := _m.Called(relatedClass, relatedPlan)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1beta1.ClusterServiceClass, *v1beta1.ClusterServicePlan) bool); ok {
		r0 = rf(relatedClass, relatedPlan)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields: environment, pagingParams
func (_m *mockInstanceSvc) List(environment string, pagingParams pager.PagingParams) ([]*v1beta1.ServiceInstance, error) {
	ret := _m.Called(environment, pagingParams)

	var r0 []*v1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(string, pager.PagingParams) []*v1beta1.ServiceInstance); ok {
		r0 = rf(environment, pagingParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, pager.PagingParams) error); ok {
		r1 = rf(environment, pagingParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForStatus provides a mock function with given fields: environment, pagingParams, _a2
func (_m *mockInstanceSvc) ListForStatus(environment string, pagingParams pager.PagingParams, _a2 *status.ServiceInstanceStatusType) ([]*v1beta1.ServiceInstance, error) {
	ret := _m.Called(environment, pagingParams, _a2)

	var r0 []*v1beta1.ServiceInstance
	if rf, ok := ret.Get(0).(func(string, pager.PagingParams, *status.ServiceInstanceStatusType) []*v1beta1.ServiceInstance); ok {
		r0 = rf(environment, pagingParams, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta1.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, pager.PagingParams, *status.ServiceInstanceStatusType) error); ok {
		r1 = rf(environment, pagingParams, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: listener
func (_m *mockInstanceSvc) Subscribe(listener resource.Listener) {
	_m.Called(listener)
}

// Unsubscribe provides a mock function with given fields: listener
func (_m *mockInstanceSvc) Unsubscribe(listener resource.Listener) {
	_m.Called(listener)
}
